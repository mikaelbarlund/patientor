{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","PatientMaintPage/EntryDetails.tsx","PatientMaintPage/AddEntryModal/FormField.tsx","PatientMaintPage/AddEntryModal/AddEntryForm.tsx","PatientMaintPage/AddEntryModal/index.tsx","PatientMaintPage/index.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","apiBaseUrl","setPatientList","patientListFromApi","type","payload","addSensitivePatient","patientFromApi","addPatient","newPatient","setDiagnosisList","diagnosisListFromApi","initialState","patients","sensitivePatients","diagnosis","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","TextField","field","placeholder","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","data","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","to","DiagnosticCodes","diagnosisCodes","Card","Description","List","items","code","diagnose","find","HealthChecklEntryDetails","entry","heartColor","healthCheckRating","date","Icon","size","Meta","specialist","content","description","OccupationalHealthcareEntryDetails","HospitalEntryDetails","EntryDetails","useEffect","length","get","fetchDiagnosis","Error","JSON","stringify","assertNever","reqplaceholder","DiagnosisSelection","diagnoses","setFieldValue","setFieldTouched","stateOptions","text","Dropdown","fluid","multiple","search","selection","onChange","_event","typeOptions","healthCheckOptions","keys","filter","isNaN","parseInt","AddEntryForm","today","Date","getFullYear","getMonth","toString","padStart","getDate","employerName","sickLeave","startDate","endDate","discharge","criteria","requiredError","input","inputDate","isDate","useParams","submitNewEntryForm","log","fetchPatient","Group","entries","AddEntryModal","App","fetchPatientList","Link","primary","Divider","hidden","exact","path","render","PatientMaintPage","ReactDOM","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.362cc302.chunk.js","sourcesContent":["export enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other',\n}\n\nexport interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  \"Healthy\" = 0,\n  \"LowRisk\" = 1,\n  \"HighRisk\" = 2,\n  \"CriticalRisk\" = 3\n}\n\nexport type Entrytype = \"Hospital\" | \"OccupationalHealthcare\" | \"HealthCheck\";\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: \"HealthCheck\";\n  healthCheckRating: HealthCheckRating;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: \"OccupationalHealthcare\";\n  employerName: string;\n  sickLeave?: {\n    startDate: string;\n    endDate: string;\n  };\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: \"Hospital\";\n  discharge: {\n    date: string;\n    criteria: string;\n  };\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\nexport interface Patient {\n  id: string;\n  name: string;\n  dateOfBirth: string;\n  ssn: string;\n  gender: Gender;\n  occupation: string;\n  entries: Entry[];\n}\n\nexport interface PatientRequest {\n  id: string;\n  name: string;\n  dateOfBirth: string;\n  ssn: string;\n  gender: string;\n  occupation: string;\n}\n\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import { State } from \"./state\";\nimport { Diagnosis, Patient } from \"../types\";\n\nexport type Action =\n  | {\n    type: \"SET_PATIENT_LIST\";\n    payload: Patient[];\n  }\n  | {\n    type: \"ADD_PATIENT\";\n    payload: Patient;\n  }\n  | {\n    type: \"ADD_SENSITIVE_PATIENT\";\n    payload: Patient;\n  }\n  | {\n    type: \"ADD_ENTRY\";\n    payload: Patient;\n  }\n  | {\n    type: \"SET_DIAGNOSIS_LIST\";\n    payload: Diagnosis[];\n  }\n  ;\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"ADD_SENSITIVE_PATIENT\":\n      return {\n        ...state,\n        sensitivePatients: {\n          ...state.sensitivePatients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_DIAGNOSIS_LIST\":\n      return {\n        ...state,\n        diagnosis: {\n          ...action.payload.reduce(\n            (memo, diagnose) => ({ ...memo, [diagnose.code]: diagnose }),\n            {}\n          ),\n          ...state.diagnosis\n        }\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setPatientList = (patientListFromApi: Patient[]): Action => {\n  return { type: \"SET_PATIENT_LIST\", payload: patientListFromApi };\n};\n\nexport const addSensitivePatient = (patientFromApi: Patient): Action => {\n  return { type: \"ADD_SENSITIVE_PATIENT\", payload: patientFromApi };\n};\n\nexport const addPatient = (newPatient: Patient): Action => {\n  return { type: \"ADD_PATIENT\", payload: newPatient };\n};\nexport const setDiagnosisList = (diagnosisListFromApi: Diagnosis[]): Action => {\n  return { type: \"SET_DIAGNOSIS_LIST\", payload: diagnosisListFromApi };\n};\n\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Diagnosis, Patient } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  sensitivePatients: { [id: string]: Patient };\n  diagnosis: { [code: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  sensitivePatients: {},\n  diagnosis: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(StateContext);\n\n","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Container, Table, Button } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport { useStateValue, addPatient } from \"../state\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to={`/patients/${patient.id}`} >{patient.name}</Link></Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { Card, Icon, List } from \"semantic-ui-react\";\nimport { apiBaseUrl } from \"../constants\";\nimport { setDiagnosisList, useStateValue } from \"../state\";\nimport { Diagnosis, Entry, HealthCheckEntry } from \"../types\";\n\n/**\n * Helper function for exhaustive type checking\n */\nconst assertNever = (value: never): never => {\n    throw new Error(\n        `Unhandled discriminated union member: ${JSON.stringify(value)}`\n    );\n};\n\n\nconst DiagnosticCodes: React.FC<{ diagnosisCodes: string[] | undefined }> = ({ diagnosisCodes }) => {\n    const [{ diagnosis }] = useStateValue();\n    return (\n        <>\n            {diagnosisCodes ?\n                <Card.Content>\n                    <Card.Description>\n                        <List items={diagnosisCodes?.map((code: string) => {\n                            const diagnose = Object.values(diagnosis).find((a: Diagnosis) => a.code === code);\n                            return `${code} ${diagnose ? diagnose.name : ''}`;\n                        })} />\n                    </Card.Description>\n                </Card.Content> : <></>}\n        </>\n    );\n};\n\nconst HealthChecklEntryDetails: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => {\n    let heartColor: \"green\" | \"yellow\" | \"red\" | \"violet\" | undefined = 'green';\n    switch (entry.healthCheckRating) {\n        case 0:\n            break;\n        case 1:\n            heartColor = 'yellow';\n            break;\n        case 2:\n            heartColor = 'red';\n            break;\n        case 3:\n            heartColor = 'violet';\n            break;\n        default:\n            break;\n    }\n\n    return (\n        < Card >\n            <Card.Content>\n                <Card.Header >{entry.date}<Icon name='doctor' size='large' /></Card.Header>\n                <Card.Meta>{entry.specialist}</Card.Meta>\n                <Card.Description content={entry.description} />\n                <Card.Description ><Icon name='heart' size='small' color={heartColor} /></Card.Description>\n            </Card.Content>\n            <DiagnosticCodes diagnosisCodes={entry.diagnosisCodes} />\n        </Card >\n    );\n};\nconst OccupationalHealthcareEntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n    return (\n        < Card >\n            <Card.Content>\n                <Card.Header >{entry.date}<Icon name='stethoscope' size='large' /></Card.Header>\n                <Card.Meta>{entry.specialist}</Card.Meta>\n                <Card.Description content={entry.description} />\n            </Card.Content>\n            <DiagnosticCodes diagnosisCodes={entry.diagnosisCodes} />\n        </Card >\n    );\n};\nconst HospitalEntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n    return (\n        < Card >\n            <Card.Content>\n                <Card.Header >{entry.date}<Icon name='hospital' size='large' /></Card.Header>\n                <Card.Meta>{entry.specialist}</Card.Meta>\n                <Card.Description content={entry.description} />\n            </Card.Content>\n            <DiagnosticCodes diagnosisCodes={entry.diagnosisCodes} />\n        </Card >\n    );\n};\nconst EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n    const [{ diagnosis }, dispatch] = useStateValue();\n    useEffect(() => {\n        if (!diagnosis || Object.values(diagnosis).length === 0) {\n            const fetchDiagnosis = async () => {\n                try {\n                    const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n                        `${apiBaseUrl}/diagnosis`);\n                    dispatch(setDiagnosisList(diagnosisListFromApi));\n                } catch (e) {\n                    console.error(e);\n                }\n            };\n            fetchDiagnosis();\n        }\n    }, [dispatch, diagnosis]);\n\n    switch (entry.type) {\n        case 'HealthCheck':\n            return <HealthChecklEntryDetails entry={entry} />;\n        case 'OccupationalHealthcare':\n            return <OccupationalHealthcareEntryDetails entry={entry} />;\n        case 'Hospital':\n            return <HospitalEntryDetails entry={entry} />;\n        default:\n            return assertNever(entry);\n\n    }\n\n};\n\nexport default EntryDetails;","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis } from \"../../types\";\n\n// structure of a single option\nexport type EntryTypeOption = {\n  value: string;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: EntryTypeOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field reqplaceholder={placeholder} {...field} />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form, ErrorMessage } from \"formik\";\n\nimport { TextField, SelectField, EntryTypeOption, DiagnosisSelection } from \"./FormField\";\nimport { HealthCheckRating, Diagnosis, Entrytype } from \"../../types\";\nimport { useStateValue } from \"../../state\";\n\n\n/*\n * use type Entry, but omit id,\n * because those are irrelevant for new entry object.\n */\nexport interface EntryFormValues {\n  type: Entrytype;\n  description: string;\n  date: string;\n  specialist: string;\n  healthCheckRating: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n  employerName: string;\n  sickLeave?: {\n    startDate: string;\n    endDate: string;\n  };\n  discharge?: {\n    date: string;\n    criteria: string;\n  };\n}\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\n\nconst typeOptions: EntryTypeOption[] = [\n  { value: \"Hospital\", label: \"Hospital\" },\n  { value: \"OccupationalHealthcare\", label: \"OccupationalHealthcare\" },\n  { value: \"HealthCheck\", label: \"HealthCheck\" }\n];\n\n\nconst healthCheckOptions: EntryTypeOption[] =\n  Object.keys(HealthCheckRating).filter(a => !isNaN(parseInt(a))).map(a => {\n    return { value: a, label: HealthCheckRating[parseInt(a)] };\n  });\n\nconst isDate = (input: string): boolean => {\n  const inputDate = new Date(input);\n  return `${inputDate.getFullYear()}-${(inputDate.getMonth() + 1).toString().padStart(2, '0')}-${inputDate.getDate().toString().padStart(2, '0')}` === input;\n};\nexport const assertNever = (arg: never): never => arg;\n\nexport const AddEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  const [{ diagnosis }] = useStateValue();\n  const today = new Date();\n  return (\n    <Formik\n      initialValues={{\n        type: \"Hospital\",\n        description: \"\",\n        date: `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`,\n        specialist: \"\",\n        healthCheckRating: \"0\",\n        diagnosisCodes: [],\n        employerName: \"\",\n        sickLeave: { startDate: \"\", endDate: \"\" },\n        discharge: { date: \"\", criteria: \"\" },\n\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const invalidDateError = \"Invalid date specified, should be YYYY-MM-DD\";\n        const errors: { [field: string]: string } = {};\n        if (!values.type) {\n          errors.type = requiredError;\n        }\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        } else if (!isDate(values.date)) {\n          errors.date = invalidDateError;\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        switch (values.type) {\n          case \"Hospital\":\n            if (!values.discharge || !values.discharge.date || !values.discharge.criteria) {\n              errors.discharge = \"Discharge date and criteria is required.\";\n            }\n            break;\n          case \"OccupationalHealthcare\":\n            if (!values.employerName) {\n              errors.employerName = requiredError;\n            }\n            break;\n          case \"HealthCheck\":\n            if (!values.healthCheckRating) {\n              errors.healthCheckRating = requiredError;\n            }\n            break;\n          default:\n            assertNever(values.type);\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, values, setFieldValue, setFieldTouched }) => {\n        return (\n          <Form className=\"form ui\">\n            <SelectField\n              label=\"Type\"\n              name=\"type\"\n              options={typeOptions}\n            />\n            <Field\n              label=\"Description\"\n              placeholder=\"Description\"\n              name=\"description\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"date\"\n              component={TextField}\n            />\n            <Field\n              label=\"Specialist\"\n              placeholder=\"Specialist\"\n              name=\"specialist\"\n              component={TextField}\n            />\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnosis)}\n            />\n            {values.type === \"HealthCheck\" &&\n              <SelectField\n                label=\"Health-check Rating\"\n                name=\"healthCheckRating\"\n                options={healthCheckOptions}\n              />\n            }\n            {values.type === \"OccupationalHealthcare\" &&\n              <>\n                <Field\n                  label=\"Employer Name\"\n                  placeholder=\"Employer Name\"\n                  name=\"employerName\"\n                  component={TextField}\n                />\n                <h4 className=\"ui dividing header\">Sick Leave</h4>\n                <div className=\"equal width fields\">\n                  <Field\n                    label=\"Start Date\"\n                    placeholder=\"YYYY-MM-DD\"\n                    name=\"sickLeave.startDate\"\n                    component={TextField}\n                  />\n                  <Field\n                    label=\"End Date\"\n                    placeholder=\"YYYY-MM-DD\"\n                    name=\"sickLeave.endDate\"\n                    component={TextField}\n                  />\n                </div>\n              </>\n            }\n            {values.type === \"Hospital\" &&\n              <>\n                <h4 className=\"ui dividing header\">Discharge</h4>\n                <div style={{ color: 'red' }}>\n                  <ErrorMessage name=\"discharge\" />\n                </div>\n                <div className=\"equal width fields\">\n                  <Field\n                    label=\"Date\"\n                    placeholder=\"YYYY-MM-DD\"\n                    name=\"discharge.date\"\n                    component={TextField}\n                  />\n                  <Field\n                    label=\"Criteria\"\n                    placeholder=\"Criteria\"\n                    name=\"discharge.criteria\"\n                    component={TextField}\n                  />\n                </div>\n              </>\n            }\n\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddEntryForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport {  } from '../../types';\nimport AddPatientForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EntryFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Card, Container, Header, Icon, Button } from \"semantic-ui-react\";\nimport { useParams } from \"react-router-dom\";\nimport { apiBaseUrl } from \"../constants\";\nimport { Entry, Patient } from \"../types\";\nimport { useStateValue, addSensitivePatient } from \"../state\";\nimport EntryDetails from \"./EntryDetails\";\nimport AddEntryModal from \"./AddEntryModal\";\nimport { EntryFormValues } from \"./AddEntryModal/AddEntryForm\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ sensitivePatients }, dispatch] = useStateValue();\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const { id } = useParams<{ id: string }>();\n  const patient = Object.values(sensitivePatients).find((a: Patient) => a.id === id);\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n  };\n  const submitNewEntryForm = async (values: EntryFormValues) => {\n    try {\n      console.log(values);\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients/${id}/entries`,\n        values\n      );\n      console.log(newPatient);\n      dispatch(addSensitivePatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n    }\n  };\n\n\n  useEffect(() => {\n    if (!patient) {\n      const fetchPatient = async () => {\n        try {\n          const { data: patientFromApi } = await axios.get<Patient>(\n            `${apiBaseUrl}/patients/${id}`\n          );\n          dispatch(addSensitivePatient(patientFromApi));\n        } catch (e) {\n          console.error(e);\n        }\n      };\n      fetchPatient();\n    }\n  }, [dispatch, id, patient]);\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"left\">\n        {patient ?\n          <div>\n            <Header as=\"h1\">{patient.name} {patient.gender === \"male\" ? <Icon name=\"mars\" /> : patient.gender === \"female\" ? <Icon name=\"venus\" /> : <Icon name=\"venus mars\" />}</Header>\n            <div>ssn: {patient.ssn}</div>\n            <div>occupation: {patient.occupation}</div>\n            <Header as=\"h3\">entries</Header>\n            <Card.Group>\n              {patient.entries.map((entry: Entry) => (\n                <EntryDetails key={entry.id} entry={entry} />\n              ))}\n            </Card.Group>\n          </div>\n          : <Header>patient not found</Header>}\n      </Container>\n      <AddEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewEntryForm}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Entry</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue, setPatientList } from \"./state\";\nimport { Patient } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\nimport PatientMaintPage from \"./PatientMaintPage\";\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route exact path=\"/\" render={() => <PatientListPage />} />\n            <Route path=\"/patients/:id\"><PatientMaintPage /></Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}